name: üöÄ ARM Cross-Compilation Matrix

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  cross-compile-arm:
    name: "‚öôÔ∏è ${{ matrix.config.name }}"
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        config:
          # Raspberry Pi Zero/Zero W (ARMv6)
          - name: "Pi Zero"
            arch: "armv6"
            cc: "arm-linux-gnueabi-gcc"
            cxx: "arm-linux-gnueabi-g++"
            cflags: "-march=armv6 -mfpu=vfp -mfloat-abi=softfp -O2"
            target: "pi-zero"
            
          # Raspberry Pi 3/4 (ARMv7)
          - name: "Pi 3/4"
            arch: "armv7"
            cc: "arm-linux-gnueabihf-gcc"
            cxx: "arm-linux-gnueabihf-g++"
            cflags: "-march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard -O2"
            target: "pi3-4"
            
          # ARM64/AArch64 (Pi 4 64-bit, etc.)
          - name: "ARM64"
            arch: "aarch64"
            cc: "aarch64-linux-gnu-gcc"
            cxx: "aarch64-linux-gnu-g++"
            cflags: "-march=armv8-a -O2"
            target: "arm64"
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üõ†Ô∏è Install Cross-Compilation Tools
      run: |
        sudo apt-get update
        
        if [ "${{ matrix.config.arch }}" = "aarch64" ]; then
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross
        else
          sudo apt-get install -y \
            gcc-arm-linux-gnueabi \
            g++-arm-linux-gnueabi \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            libc6-dev-armhf-cross \
            libc6-armel-cross \
            libc6-dev-armel-cross
        fi
        
        sudo apt-get install -y build-essential cmake pkg-config
        
    - name: ‚öôÔ∏è Configure Build Environment
      run: |
        # Set compiler variables
        echo "CC=${{ matrix.config.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.config.cxx }}" >> $GITHUB_ENV
        echo "AR=${{ matrix.config.cc }}-ar" >> $GITHUB_ENV
        
        # Set correct strip command based on architecture
        if [ "${{ matrix.config.arch }}" = "aarch64" ]; then
          echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
        elif [ "${{ matrix.config.arch }}" = "armv6" ]; then
          echo "STRIP=arm-linux-gnueabi-strip" >> $GITHUB_ENV
        else
          echo "STRIP=arm-linux-gnueabihf-strip" >> $GITHUB_ENV
        fi
        
        # Set compilation flags
        echo "CFLAGS=${{ matrix.config.cflags }}" >> $GITHUB_ENV
        echo "CXXFLAGS=${{ matrix.config.cflags }} -std=c++11" >> $GITHUB_ENV
        echo "LDFLAGS=${{ matrix.config.cflags }}" >> $GITHUB_ENV
        
        # Display configuration
        echo "üéØ Target: ${{ matrix.config.name }} (${{ matrix.config.arch }})"
        echo "üîß Compiler: ${{ matrix.config.cc }}"
        echo "üèóÔ∏è Flags: ${{ matrix.config.cflags }}"
        
    - name: üèóÔ∏è Build Simple Version
      run: |
        # Clean previous builds
        make clean || true
        
        # Build simple version
        if make simple \
          CC="${{ matrix.config.cc }}" \
          CXX="${{ matrix.config.cxx }}" \
          CXXFLAGS="${{ matrix.config.cflags }} -std=c++11" \
          LDFLAGS="${{ matrix.config.cflags }}"; then
          
          echo "‚úÖ Simple version built successfully"
          ls -lh motion-detector-simple
          file motion-detector-simple
        else
          echo "‚ùå Simple version build failed"
          exit 1
        fi
        
    - name: üöÄ Build Advanced Version
      continue-on-error: true
      run: |
        # Add optimization flags based on architecture
        EXTRA_FLAGS=""
        case "${{ matrix.config.arch }}" in
          "armv6")
            EXTRA_FLAGS="-ftree-vectorize"
            ;;
          "armv7")
            EXTRA_FLAGS="-ftree-vectorize -ffast-math"
            ;;
          "aarch64")
            EXTRA_FLAGS="-ftree-vectorize -ffast-math"
            ;;
        esac
        
        if make advanced \
          CC="${{ matrix.config.cc }}" \
          CXX="${{ matrix.config.cxx }}" \
          CXXFLAGS="${{ matrix.config.cflags }} -std=c++11 $EXTRA_FLAGS" \
          LDFLAGS="${{ matrix.config.cflags }}"; then
          
          echo "‚úÖ Advanced version built successfully"
          ls -lh motion-detector
          file motion-detector
        else
          echo "‚ö†Ô∏è Advanced version build failed - continuing with simple version"
        fi
        
    - name: üîó Build Static Version
      continue-on-error: true
      run: |
        # Add optimization flags based on architecture
        EXTRA_FLAGS=""
        case "${{ matrix.config.arch }}" in
          "armv6")
            EXTRA_FLAGS="-ftree-vectorize"
            ;;
          "armv7")
            EXTRA_FLAGS="-ftree-vectorize -ffast-math"
            ;;
          "aarch64")
            EXTRA_FLAGS="-ftree-vectorize -ffast-math"
            ;;
        esac
        
        if make static \
          CC="${{ matrix.config.cc }}" \
          CXX="${{ matrix.config.cxx }}" \
          CXXFLAGS="${{ matrix.config.cflags }} -std=c++11 $EXTRA_FLAGS" \
          LDFLAGS="${{ matrix.config.cflags }}"; then
          
          echo "‚úÖ Static version built successfully"
          ls -lh motion-detector-static
          file motion-detector-static
          echo "üìä Static binary info:"
          ldd motion-detector-static 2>&1 || echo "  ‚úì Fully static binary (no dynamic dependencies)"
        else
          echo "‚ö†Ô∏è Static version build failed - continuing without static version"
        fi
        
    - name: üçì Build Pi Zero Debug Version
      if: matrix.config.arch == 'armv6'
      continue-on-error: true
      run: |
        echo "üîß Building Pi Zero debug version (ARMv6 only)..."
        
        if make pi-debug \
          CC="${{ matrix.config.cc }}" \
          CXX="${{ matrix.config.cxx }}" \
          CXXFLAGS="${{ matrix.config.cflags }} -std=c++11" \
          LDFLAGS="${{ matrix.config.cflags }}"; then
          
          echo "‚úÖ Pi Zero debug version built successfully"
          ls -lh motion-detector-pi-debug
          file motion-detector-pi-debug
          echo "üìä Pi Zero debug features:"
          echo "  ‚úì Conservative memory limits"
          echo "  ‚úì DC-only mode disabled for stability"
          echo "  ‚úì Segfault debugging enabled"
          echo "  ‚úì Image size safety checks"
          echo "  ‚úì ARM alignment fixes"
        else
          echo "‚ö†Ô∏è Pi Zero debug version build failed"
        fi
        
    - name: üß™ Verify Binary Compatibility
      run: |
        # Check simple version
        if [ -f "motion-detector-simple" ]; then
          echo "üìã Simple version info:"
          file motion-detector-simple
          readelf -h motion-detector-simple | grep -E "(Machine|Flags|Class)" || true
          echo ""
        fi
        
        # Check advanced version
        if [ -f "motion-detector" ]; then
          echo "üìã Advanced version info:"
          file motion-detector
          readelf -h motion-detector | grep -E "(Machine|Flags|Class)" || true
          echo ""
        fi
        
        # Check static version
        if [ -f "motion-detector-static" ]; then
          echo "üìã Static version info:"
          file motion-detector-static
          readelf -h motion-detector-static | grep -E "(Machine|Flags|Class)" || true
          echo "üìä Dependencies check:"
          ldd motion-detector-static 2>&1 || echo "  ‚úì No dynamic dependencies (fully static)"
          echo ""
        fi
        
        # Check Pi Zero debug version (ARMv6 only)
        if [ -f "motion-detector-pi-debug" ]; then
          echo "üìã Pi Zero debug version info:"
          file motion-detector-pi-debug
          readelf -h motion-detector-pi-debug | grep -E "(Machine|Flags|Class)" || true
          echo "üçì Pi Zero optimizations:"
          echo "  ‚úì ARMv6 soft-float compatible"
          echo "  ‚úì Conservative memory usage"
          echo "  ‚úì Segfault protection enabled"
          echo ""
        fi
        
    - name: üì¶ Create Release Package
      run: |
        # Create target directory
        PKG_DIR="motion-detector-${{ matrix.config.target }}"
        mkdir -p "$PKG_DIR"
        
        # Strip and copy binaries
        if [ -f "motion-detector-simple" ]; then
          $STRIP motion-detector-simple
          cp motion-detector-simple "$PKG_DIR/"
          echo "‚úÖ Simple version packaged and stripped"
        fi
        
        if [ -f "motion-detector" ]; then
          $STRIP motion-detector
          cp motion-detector "$PKG_DIR/motion-detector-advanced"
          echo "‚úÖ Advanced version packaged and stripped"
        fi
        
        if [ -f "motion-detector-static" ]; then
          $STRIP motion-detector-static
          cp motion-detector-static "$PKG_DIR/"
          echo "‚úÖ Static version packaged and stripped"
        fi
        
        if [ -f "motion-detector-pi-debug" ]; then
          $STRIP motion-detector-pi-debug
          cp motion-detector-pi-debug "$PKG_DIR/"
          echo "‚úÖ Pi Zero debug version packaged and stripped"
        fi
        
        # Copy documentation and scripts
        cp README.md "$PKG_DIR/" || true
        cp build_for_pi.sh "$PKG_DIR/" || true
        cp PI_ZERO_FIX.md "$PKG_DIR/" || true
        
        # Copy Pi Zero specific test script for ARMv6 builds
        if [ "${{ matrix.config.arch }}" = "armv6" ] && [ -f "tests/pi_zero_debug_test.sh" ]; then
          mkdir -p "$PKG_DIR/tests"
          cp tests/pi_zero_debug_test.sh "$PKG_DIR/tests/"
          echo "‚úÖ Pi Zero debug test script included"
        fi
        
        # Create target-specific installation script
        cat > "$PKG_DIR/install.sh" << EOF
        #!/bin/bash
        echo "üéØ Motion Detector - ${{ matrix.config.name }} Installation"
        echo "======================================================"
        
        # Architecture check
        EXPECTED_ARCH="${{ matrix.config.arch }}"
        CURRENT_ARCH=\$(uname -m)
        
        echo "Current architecture: \$CURRENT_ARCH"
        echo "Package architecture: \$EXPECTED_ARCH"
        
        # Install binaries
        if [ -f "motion-detector-simple" ]; then
          sudo cp motion-detector-simple /usr/local/bin/motion-detector
          sudo chmod +x /usr/local/bin/motion-detector
          echo "‚úÖ Installed motion-detector-simple to /usr/local/bin/motion-detector"
        fi
        
        if [ -f "motion-detector-advanced" ]; then
          sudo cp motion-detector-advanced /usr/local/bin/motion-detector-advanced
          sudo chmod +x /usr/local/bin/motion-detector-advanced
          echo "‚úÖ Installed motion-detector-advanced to /usr/local/bin/motion-detector-advanced"
        fi
        
        if [ -f "motion-detector-static" ]; then
          sudo cp motion-detector-static /usr/local/bin/motion-detector-static
          sudo chmod +x /usr/local/bin/motion-detector-static
          echo "‚úÖ Installed motion-detector-static to /usr/local/bin/motion-detector-static"
        fi
        
        if [ -f "motion-detector-pi-debug" ]; then
          sudo cp motion-detector-pi-debug /usr/local/bin/motion-detector-pi-debug
          sudo chmod +x /usr/local/bin/motion-detector-pi-debug
          echo "‚úÖ Installed motion-detector-pi-debug to /usr/local/bin/motion-detector-pi-debug"
          echo "   üçì Pi Zero specific version with segfault protection"
        fi
        
        echo ""
        echo "üöÄ Installation complete!"
        echo "Test with: motion-detector img1.jpg img2.jpg -g -s 2 -v"
        
        if [ -f "tests/pi_zero_debug_test.sh" ]; then
          echo ""
          echo "üçì Pi Zero users: Run comprehensive test with:"
          echo "   cd tests && ./pi_zero_debug_test.sh"
          echo "   See PI_ZERO_FIX.md for troubleshooting guide"
        fi
        EOF
        
        chmod +x "$PKG_DIR/install.sh"
        
        # Create target-specific README
        cat > "$PKG_DIR/README-${{ matrix.config.target }}.md" << EOF
        # Motion Detector - ${{ matrix.config.name }} Build
        
        ## Target Information
        - **Platform**: ${{ matrix.config.name }}
        - **Architecture**: ${{ matrix.config.arch }}
        - **Compiler**: ${{ matrix.config.cc }}
        - **Optimization**: ${{ matrix.config.cflags }}
        
        ## Available Versions
        
        ### Simple Version (motion-detector-simple)
        - Maximum compatibility
        - Uses standard libraries
        - Recommended for most users
        
        ### Advanced Version (motion-detector-advanced)
        - Optimized for ${{ matrix.config.name }}
        - Platform-specific optimizations
        - Better performance
        
        ### Static Version (motion-detector-static)
        - **Fully portable** - no dependencies
        - Can run on any ${{ matrix.config.name }} device
        - Larger file size but maximum compatibility
        - **Recommended for deployment**
        
        ### Pi Zero Debug Version (motion-detector-pi-debug) üçì
        - **Pi Zero W/Zero 2 W specific** (ARMv6 only)
        - Segfault protection and conservative memory usage
        - DC-only mode disabled for stability
        - Image size safety checks
        - **Recommended for Pi Zero troubleshooting**
        
        ## Installation
        \`\`\`bash
        ./install.sh
        \`\`\`
        
        ## Usage
        \`\`\`bash
        # Basic usage (simple version)
        motion-detector image1.jpg image2.jpg -v
        
        # Optimized for ${{ matrix.config.name }} (advanced version)
        motion-detector-advanced image1.jpg image2.jpg -g -s 2 --benchmark
        
        # Portable static version (works everywhere)
        motion-detector-static image1.jpg image2.jpg -g -s 2 -v
        
        # Pi Zero debug version (ARMv6 only, segfault protection)
        motion-detector-pi-debug image1.jpg image2.jpg -s 8 -g -v
        \`\`\`
        
        ## Performance Notes
        - **Simple**: Maximum compatibility, standard performance
        - **Advanced**: Platform-optimized, best performance
        - **Static**: Portable, good performance, no dependencies
        - **Pi Zero Debug**: Conservative settings, segfault protection, stability-focused
        
        ## Deployment Recommendation
        Use **motion-detector-static** for production deployment as it has no external dependencies.
        EOF
        
        # Show package contents
        echo "üì¶ Package contents for ${{ matrix.config.name }}:"
        ls -la "$PKG_DIR"
        
        # Create tarball
        tar -czf "$PKG_DIR.tar.gz" "$PKG_DIR"
        echo "‚úÖ Created $PKG_DIR.tar.gz"
        
    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: motion-detector-${{ matrix.config.target }}
        path: motion-detector-${{ matrix.config.target }}.tar.gz
        retention-days: 30
        
    - name: üéâ Build Summary
      run: |
        echo "üìä Build Summary for ${{ matrix.config.name }}:"
        echo "=============================================="
        
        if [ -f "motion-detector-${{ matrix.config.target }}/motion-detector-simple" ]; then
          SIZE=$(ls -lh motion-detector-${{ matrix.config.target }}/motion-detector-simple | awk '{print $5}')
          echo "‚úÖ Simple version: $SIZE"
        fi
        
        if [ -f "motion-detector-${{ matrix.config.target }}/motion-detector-advanced" ]; then
          SIZE=$(ls -lh motion-detector-${{ matrix.config.target }}/motion-detector-advanced | awk '{print $5}')
          echo "‚úÖ Advanced version: $SIZE"
        fi
        
        if [ -f "motion-detector-${{ matrix.config.target }}/motion-detector-static" ]; then
          SIZE=$(ls -lh motion-detector-${{ matrix.config.target }}/motion-detector-static | awk '{print $5}')
          echo "‚úÖ Static version: $SIZE (portable)"
        fi
        
        echo ""
        echo "üéØ Target: ${{ matrix.config.name }} (${{ matrix.config.arch }})"
        echo "üì¶ Package: motion-detector-${{ matrix.config.target }}.tar.gz"
        echo "üöÄ Ready for deployment!"
        
    - name: üì• Download Instructions
      run: |
        echo ""
        echo "üîó DOWNLOAD LINKS:"
        echo "=================="
        echo ""
        echo "1Ô∏è‚É£ Go to GitHub Actions page:"
        echo "   üëâ https://github.com/${{ github.repository }}/actions"
        echo ""
        echo "2Ô∏è‚É£ Click on this workflow run:"
        echo "   üëâ https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "3Ô∏è‚É£ Scroll down to 'Artifacts' section and download:"
        echo "   üì¶ motion-detector-${{ matrix.config.target }}.tar.gz"
        echo ""
        echo "4Ô∏è‚É£ Or use direct download command:"
        echo "   curl -L -H \"Authorization: token YOUR_TOKEN\" \\"
        echo "        -H \"Accept: application/vnd.github.v3+json\" \\"
        echo "        https://api.github.com/repos/${{ github.repository }}/actions/artifacts/ARTIFACT_ID/zip"
        echo ""
        echo "üìã Package contains:"
        echo "   ‚Ä¢ motion-detector-simple (recommended)"
        echo "   ‚Ä¢ motion-detector-advanced (if built successfully)"
        echo "   ‚Ä¢ motion-detector-static (portable, no dependencies)"
        echo "   ‚Ä¢ install.sh (automated installer)"
        echo "   ‚Ä¢ README-${{ matrix.config.target }}.md (platform guide)"
        echo ""
        echo "üöÄ Quick install on target device:"
        echo "   tar -xzf motion-detector-${{ matrix.config.target }}.tar.gz"
        echo "   cd motion-detector-${{ matrix.config.target }}"
        echo "   ./install.sh"

  # Summary job that runs after all builds complete
  download-summary:
    name: "üì• Download Summary"
    runs-on: ubuntu-latest
    needs: cross-compile-arm
    if: always()
    
    steps:
    - name: üìã All Artifacts Summary
      run: |
        echo ""
        echo "üöÄ MOTION DETECTOR - ARM CROSS-COMPILATION COMPLETE!"
        echo "====================================================="
        echo ""
        echo "üì¶ Available Downloads:"
        echo "----------------------"
        echo "‚Ä¢ motion-detector-pi-zero    (Raspberry Pi Zero/Zero W)"
        echo "‚Ä¢ motion-detector-pi3-4      (Raspberry Pi 3/4 32-bit)"  
        echo "‚Ä¢ motion-detector-arm64      (ARM64/AArch64 64-bit)"
        echo ""
        echo "üîó HOW TO DOWNLOAD:"
        echo "==================="
        echo ""
        echo "1Ô∏è‚É£ Visit this workflow run:"
        echo "   üëâ https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "2Ô∏è‚É£ Scroll to 'Artifacts' section at the bottom"
        echo ""
        echo "3Ô∏è‚É£ Click to download the package for your platform:"
        echo "   üì± Pi Zero:  motion-detector-pi-zero.tar.gz"
        echo "   üçì Pi 3/4:   motion-detector-pi3-4.tar.gz"
        echo "   üí™ ARM64:    motion-detector-arm64.tar.gz"
        echo ""
        echo "üìã Each package contains:"
        echo "   ‚úÖ Pre-compiled binaries (simple + advanced + static versions)"
        echo "   ‚úÖ Automated install script (./install.sh)"
        echo "   ‚úÖ Platform-specific documentation"
        echo "   ‚úÖ Build scripts and Makefile"
        echo ""
        echo "üöÄ Installation on target device:"
        echo "   tar -xzf motion-detector-PLATFORM.tar.gz"
        echo "   cd motion-detector-PLATFORM/"
        echo "   ./install.sh"
        echo ""
        echo "üß™ Test your installation:"
        echo "   motion-detector img1.jpg img2.jpg -g -s 2 -v"
        echo ""
        echo "üí° Version recommendations:"
        echo "   ‚Ä¢ Simple: Maximum compatibility, standard performance"
        echo "   ‚Ä¢ Advanced: Platform-optimized, best performance"  
        echo "   ‚Ä¢ Static: Portable, no dependencies, recommended for deployment"
        echo ""
        echo "üéØ Performance tips:"
        echo "   ‚Ä¢ Pi Zero: Use -s 2 or -s 3 for better performance"
        echo "   ‚Ä¢ Pi 3/4:  Try advanced version with --benchmark"
        echo "   ‚Ä¢ ARM64:   Use -d flag for DC-only JPEG mode" 